@page "/note"

@attribute [Authorize]

@using NoteAPP.Service
@using NoteAPP.Entity
@using System.Security.Claims
@using ClaimTypes = NoteAPP.Data.Enums.ClaimConsts
@inject NoteService _service
@inject AuthenticationStateProvider AuthProvider

<div class="input-group mb-3 border border-primary rounded-3">
  <input @bind="SearchTerm" type="text" class="form-control shadow-lg p-2 bg-white" placeholder="Search..." aria-label="Recipient's username" aria-describedby="button-addon2">
  <button class="btn btn-outline-primary shadow-lg p-2 " type="button" id="button-addon2" @onclick="SearchAsync">Search</button>
</div> 

<div class="d-flex justify-content-between mb-2">
    <h5 style="margin-top: 10px;" class="card-title">Note</h5>
    <div>
        <a href="note/createorupdate" class="btn btn-sm btn-outline-success p-2 rounded-2">Add New</a>
    </div>
</div>
<hr/>
@if (searchResults == null)
{
    <div class="alert alert-primary" role="alert">
        No notes have been created yet.
    </div>
}
else
{
    foreach (var note in searchResults)
    {
        <div class="card mb-3 card-style" > 
            <div class="card-body">
                <h5 class="card-title">@note.Title</h5>
                <p>@note.Content</p> <h6>@User.Identity.Name</h6>
                <hr/>
                <a class="btn btn-sm btn-outline-success p-2 rounded-3" href="note/createorupdate/@note.Id">Update</a>
                <button type="button" class="btn btn-sm btn-outline-danger p-2 rounded-3" @onclick="(() => DeleteItem(note.Id))">Delete</button>
            </div>
        </div>
    }
}

@code {

    private List<NoteEntity> searchResults = new List<NoteEntity>();

    public ClaimsPrincipal User { get; set; }

    public string SearchTerm { get; set; }
    private string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var provider = await AuthProvider.GetAuthenticationStateAsync();

        User = provider.User;

        UserId = User.Claims.First(x => x.Type.Contains(ClaimTypes.nameidentifier.ToString())).Value;
        await _service.GetNotes(UserId);
        searchResults = _service.Notes;
    }

    private async Task DeleteItem(long id)
    {
        var note = _service.Notes.Where(x => x.Id == id).First();
        await _service.DeleteItem(id);
        _service.Notes.Remove(note);
    }

    private async Task SearchAsync()
    {
        if (!string.IsNullOrWhiteSpace(SearchTerm))
            searchResults = await _service.SearchNotesAsync(SearchTerm, UserId);
        else searchResults = _service.Notes;
    }



}